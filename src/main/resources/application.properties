## Define a custom port instead of the default 8080
#server.port = 8443
## Tell Spring Security (if used) to require requests over HTTPS
#security.require-ssl=true
## The format used for the keystore
#server.ssl.key-store-type:PKCS12
## The path to the keystore containing the certificate
#server.ssl.key-store=classpath:keystore.p12
## The password used to generate the certificate
#server.ssl.key-store-password=password
## The alias mapped to the certificate
#server.ssl.key-alias=tomcat
#
#spring.thymeleaf.cache: false
#
##security.basic.enabled=false
##security.user.name=admin
##security.user.password=123456

#----------------------database-------------------------
spring.datasource.url = jdbc:mysql://localhost:3306/airline_reservation_system?serverTimezone=EST&useUnicode=true&characterEncoding=utf8
spring.datasource.username = root
spring.datasource.password = admin123456
spring.datasource.driverClassName = com.mysql.cj.jdbc.Driver

#----------------------JPA------------------------------
# Specify the DBMS
spring.jpa.database = MYSQL
# Show or not log for each sql query
spring.jpa.show-sql = false
# Hibernate ddl auto (create, create-drop, update)
spring.jpa.hibernate.ddl-auto = update
# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.DefaultNamingStrategy
# Auto increase ID
spring.jpa.hibernate.use-new-id-generator-mappings=false
# Hibernate query statistic (Only for debug)
#spring.jpa.properties.hibernate.generate_statistics = true
# stripped before adding them to the entity manager
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

# Batch update
spring.jpa.properties.hibernate.jdbc.batch_size=500
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_update=true
#spring.jpa.properties.hibernate.jdbc.batch_versioned_data = true

# Time zone for JSON date or time object
spring.jackson.time-zone= America/Toronto



# Config log4j2 xml
logging.config= classpath:log4j2.xml

#JWT config
jwt.secret=airline_booking_system





## Hikari will use the above plus the following to setup connection pooling
#spring.datasource.type=com.zaxxer.hikari.HikariDataSource
#spring.datasource.hikari.minimum-idle=5
#spring.datasource.hikari.maximum-pool-size=15
#spring.datasource.hikari.auto-commit=true
#spring.datasource.hikari.idle-timeout=30000
#spring.datasource.hikari.pool-name=HikariCP
#spring.datasource.hikari.max-lifetime=1800000
#spring.datasource.hikari.connection-timeout=30000
#spring.datasource.hikari.connection-test-query=SELECT 1

# druid: For SQL monitor
spring.datasource.druid.initial-size=5
spring.datasource.druid.min-idle=5
spring.datasource.druid.maxActive=20
spring.datasource.druid.maxWait=60000
spring.datasource.druid.timeBetweenEvictionRunsMillis=60000
spring.datasource.druid.minEvictableIdleTimeMillis=300000
spring.datasource.druid.validationQuery=SELECT 1 
spring.datasource.druid.testWhileIdle=true
spring.datasource.druid.testOnBorrow=false
spring.datasource.druid.testOnReturn=false
spring.datasource.druid.poolPreparedStatements=true
spring.datasource.druid.maxPoolPreparedStatementPerConnectionSize=20
spring.datasource.druid.filters=stat,wall
spring.datasource.druid.connectionProperties=druid.stat.mergeSql\=true;druid.stat.slowSqlMillis\=5000
spring.datasource.druid.web-stat-filter.enabled=false
spring.datasource.druid.web-stat-filter.url-pattern=/*
spring.datasource.druid.web-stat-filter.exclusions=*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*
spring.datasource.druid.stat-view-servlet.deny=192.168.1.73
spring.datasource.druid.stat-view-servlet.reset-enable=false
#以下4项，将来上生产环境以后一定要改！！！！！一定要改！！！！！一定要改！！！！！
spring.datasource.druid.stat-view-servlet.enabled=true
spring.datasource.druid.stat-view-servlet.url-pattern=/druid/*
spring.datasource.druid.stat-view-servlet.allow=127.0.0.1,*
spring.datasource.druid.stat-view-servlet.login-username=admin
spring.datasource.druid.stat-view-servlet.login-password=123456
